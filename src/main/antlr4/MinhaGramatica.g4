grammar MinhaGramatica;

fragment LETRA: [a-zA-Z];
fragment ALFANUM: [a-zA-Z0-9];
fragment DIGITO: [0-9];
PalavraChave: 'if' | 'else' | 'while' | 'func' | 'proc' | 'return' | 'IN' | 'OUT' | ';';
Tipo: 'int' | 'double' | 'bool' | 'string';
BOOLEAN: 'true' | 'false';
OpArit: '+' | '-' | '*' | '/' | '%' | '**' | '=';
OpRel: '>' | '<' | '>=' | '<=' | '==' | '!=';
AChave: '{';
FChave: '}';
AParenteses: '(';
FParenteses: ')';
AComentario: '/*';
FComentario: '*/';
WS: [ \r\t\n]* ->skip;
ID: LETRA(ALFANUM)*;
ConstINT: (DIGITO)+;
ConstREAL: (DIGITO)+'.'(DIGITO)+;
ConstSTRING: '"'(ALFANUM)+'"';
ErrorChar: . ;
LAMBDA: ;

bloco: (comando)+ #NBloco;
comando : declaracaoVar | condicional | repeticao | atribuicao | entrada | saida | comentario |
funcao| procedimento;
comentario: AComentario (ConstSTRING)* FComentario #NComentario;
entrada: ID '=' 'IN' ';' #NEntrada;
saida: 'OUT' '=' expressao ';' #NSaida;
expressao: (AParenteses)* '!'* termo (FParenteses)* ((OpArit| OpRel) expressao)* #NExpressao;
termo: ConstREAL | ConstINT | ConstSTRING | ID | BOOLEAN #NTermo;
declaracaoVar: Tipo ID ';' #NDeclaracaoVar;
condicional: 'if' AParenteses expressao FParenteses AChave bloco FChave condicionalSenao #NCondicional;
condicionalSenao: 'else' AChave bloco FChave #NCondicionalSenao | LAMBDA #NCondicionalSenaoVazia;
repeticao: 'while' AParenteses expressao FParenteses AChave bloco FChave #NRepeticao;
funcao: 'func' Tipo ID AParenteses parametros FParenteses AChave corpoFuncao FChave #NFuncao;
parametros: Tipo ID ';' #NParametrosUltimoParametro | Tipo ID #NParametrosParametro;
corpoFuncao: comando corpoFuncao #NCorpoFuncaoComando | comando 'return' expressao ';' #NCorpoFuncaoRetorno;
procedimento: 'proc' ID AParenteses parametros FParenteses AChave corpoProcedimento FChave #NProcedimento;
corpoProcedimento: comando corpoFuncao #NCorpoProcedimentoComando | comando #NCorpoProcedimentoFInal;
atribuicao: ID '=' expressao ';' #NAtribuicao;